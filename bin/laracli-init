#!/usr/bin/env node

const download = require('download-git-repo')
const program = require('commander')
const exists = require('fs').existsSync
const os = require('os')
const rm = require('rimraf').sync
const path = require('path')
const uid = require('uid')
const chalk = require('chalk')
const inquirer = require('inquirer')
const ora = require('ora')

// lib
const logger = require('../lib/logger')
const padding = require('../lib/padding')
const generate = require('../lib/generate')
const checkVersion = require('../lib/check-version')
const checkRepo = require('../lib/check-repo')
const prefix = require('../lib/config').prefix
const repoUser = require('../lib/config').repoUser

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .on('--help', () => {
    console.log('  Examples:')
    console.log()
    console.log(chalk.gray('  # create a new project with an lingxi template'))
    console.log('    $ laracli init web blog')
    console.log()
  })

/**
 * Help
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) {
    return program.help()
  }
}

help()

/**
 * Padding
 */
padding()

/**
 * Settings
 */
const template = program.args[0]
const hasSlash = template.includes('/')
const rawName = program.args[1]
const inPlace = !rawName || rawName === '.'
const name = inPlace ? path.relative('../', process.cwd()) : rawName
const to = path.resolve(rawName || '.')
const clone = program.clone || false

if (exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? 'Genarate project in current directory?'
      : 'Target directory exists. Continue?',
    name: 'ok'
  }], function (answers) {
    if (answers.ok) {
      run()
    }
  })
} else {
  run()
}

/**
 * download from github template and generate the project.
 */

function run () {
  // check if template is local
  if (hasSlash && exists(template)) {
    generate(name, template, to, err => {
      if (err) logger.fatal(err)
    })
  } else {
    checkVersion(() => {
      if (!hasSlash) {
        // avariable template
        let fullTemplate = `${repoUser}/${prefix}${template}`
        checkRepo(fullTemplate, () => {
          downloadAndGenerate(fullTemplate)
        })
      } else {
        //
      }
    })
  }
}

/**
 * Download and generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template) {
  let tmp = `${os.tmpdir()}/${prefix}${uid()}`
  let spinner = ora('downloading template')
  spinner.start()
  download(template, tmp, { clone: clone }, err => {
    spinner.stop()

    process.on('exit', () => {
      rm(tmp)
    })

    if (err) logger.fatal(`Failed to download repo ${template}: ${err.message.trim()}`)
  })
}
